// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/17/2021 23:29:17"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          mux_2to1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mux_2to1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] in1;
reg [15:0] in2;
reg select;
// wires                                               
wire [15:0] out;

// assign statements (if any)                          
mux_2to1 i1 (
// port map - connection between master ports and signals/registers   
	.in1(in1),
	.in2(in2),
	.out(out),
	.select(select)
);
initial 
begin 
#1000000 $finish;
end 
// in1[ 15 ]
initial
begin
	in1[15] = 1'b1;
end 
// in1[ 14 ]
initial
begin
	in1[14] = 1'b1;
end 
// in1[ 13 ]
initial
begin
	in1[13] = 1'b1;
end 
// in1[ 12 ]
initial
begin
	in1[12] = 1'b0;
end 
// in1[ 11 ]
initial
begin
	in1[11] = 1'b0;
end 
// in1[ 10 ]
initial
begin
	in1[10] = 1'b0;
end 
// in1[ 9 ]
initial
begin
	in1[9] = 1'b0;
end 
// in1[ 8 ]
initial
begin
	in1[8] = 1'b0;
end 
// in1[ 7 ]
initial
begin
	in1[7] = 1'b0;
end 
// in1[ 6 ]
initial
begin
	in1[6] = 1'b0;
end 
// in1[ 5 ]
initial
begin
	in1[5] = 1'b0;
end 
// in1[ 4 ]
initial
begin
	in1[4] = 1'b0;
end 
// in1[ 3 ]
initial
begin
	in1[3] = 1'b0;
end 
// in1[ 2 ]
initial
begin
	in1[2] = 1'b0;
end 
// in1[ 1 ]
initial
begin
	in1[1] = 1'b0;
end 
// in1[ 0 ]
initial
begin
	in1[0] = 1'b0;
end 
// in2[ 15 ]
initial
begin
	in2[15] = 1'b0;
end 
// in2[ 14 ]
initial
begin
	in2[14] = 1'b0;
end 
// in2[ 13 ]
initial
begin
	in2[13] = 1'b0;
end 
// in2[ 12 ]
initial
begin
	in2[12] = 1'b0;
end 
// in2[ 11 ]
initial
begin
	in2[11] = 1'b0;
end 
// in2[ 10 ]
initial
begin
	in2[10] = 1'b0;
end 
// in2[ 9 ]
initial
begin
	in2[9] = 1'b0;
end 
// in2[ 8 ]
initial
begin
	in2[8] = 1'b0;
end 
// in2[ 7 ]
initial
begin
	in2[7] = 1'b0;
end 
// in2[ 6 ]
initial
begin
	in2[6] = 1'b0;
end 
// in2[ 5 ]
initial
begin
	in2[5] = 1'b0;
end 
// in2[ 4 ]
initial
begin
	in2[4] = 1'b0;
end 
// in2[ 3 ]
initial
begin
	in2[3] = 1'b1;
end 
// in2[ 2 ]
initial
begin
	in2[2] = 1'b1;
end 
// in2[ 1 ]
initial
begin
	in2[1] = 1'b1;
end 
// in2[ 0 ]
initial
begin
	in2[0] = 1'b1;
end 

// select
initial
begin
	select = 1'b1;
end 
endmodule

